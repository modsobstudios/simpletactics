
    void BFS(SearchNode _start, SearchNode _goal)
    {
        foreach (Tile t in mapGrid)
        {
            t.setDefaultColor();
        }
        List<PlannerNode> open = new List<PlannerNode>();
        Dictionary<SearchNode, PlannerNode> visited = new Dictionary<SearchNode, PlannerNode>();
        open.Add(new PlannerNode(_start));
        visited[_start] = open[0];
        while (open.Count != 0)
        {
            PlannerNode current = open[0];
            open.RemoveAt(0);
            if (current.vertex == _goal)
            {
                while (current.parent != null)
                {
                    path.Add(current.vertex.t);
                    current = current.parent;
                }
                return;
            }
            foreach (Edge e in current.vertex.edges)
            {
                SearchNode successor = e.node;
                if (!visited.ContainsKey(successor))
                {
                    PlannerNode successorNode = new PlannerNode(successor);
                    successorNode.parent = current;
                    visited[successor] = successorNode;
                    open.Add(successorNode);
                }
            }
        }
        return;
    }

    void greedy(SearchNode _start, SearchNode _goal)
    {
        foreach (Tile t in mapGrid)
        {
            t.setDefaultColor();
        }
        List<PlannerNode> open = new List<PlannerNode>();
        Dictionary<SearchNode, PlannerNode> visited = new Dictionary<SearchNode, PlannerNode>();
        open.Add(new PlannerNode(_start));
        visited[_start] = open[0];
        visited[_start].heuristicCost = calculateCost(_start, _goal);

        while (open.Count != 0)
        {
            int lowestIndex = getLowestHeuristic(open);
            PlannerNode current = open[lowestIndex];
            open.Remove(open[lowestIndex]);
            if (current.vertex == _goal)
            {
                //current.vertex.t.setTemporaryColor(Color.yellow);

                while (current.parent != null)
                {
                    path.Add(current.vertex.t);
                    current = current.parent;
                    //   current.vertex.t.setTemporaryColor(Color.yellow);
                }
                return;
            }
            foreach (Edge e in current.vertex.edges)
            {
                SearchNode successor = e.node;
                if (!visited.ContainsKey(successor))
                {
                    PlannerNode successorNode = new PlannerNode(successor);
                    successorNode.parent = current;
                    successorNode.heuristicCost = calculateCost(successor, _goal);
                    visited[successor] = successorNode;

                    open.Add(successorNode);
                }
            }
        }
        return;
    }

    void uniformCost(SearchNode _start, SearchNode _goal)
    {
        foreach (Tile t in mapGrid)
        {
            t.setDefaultColor();
        }
        List<PlannerNode> open = new List<PlannerNode>();
        Dictionary<SearchNode, PlannerNode> visited = new Dictionary<SearchNode, PlannerNode>();
        open.Add(new PlannerNode(_start));
        visited[_start] = open[0];
        visited[_start].givenCost = 0;

        while (open.Count != 0)
        {
            int lowestIndex = getLowestGiven(open);
            PlannerNode current = open[lowestIndex];
            open.Remove(open[lowestIndex]);
            if (current.vertex == _goal)
            {
                //current.vertex.t.setTemporaryColor(Color.yellow);

                while (current.parent != null)
                {
                    path.Add(current.vertex.t);
                    current = current.parent;
                    // current.vertex.t.setTemporaryColor(Color.yellow);
                }
                return;
            }
            foreach (Edge e in current.vertex.edges)
            {
                SearchNode successor = e.node;
                float tempGiven = current.givenCost + e.cost;
                if (visited.ContainsKey(successor))
                {
                    if (tempGiven < visited[successor].givenCost)
                    {
                        PlannerNode successorNode = new PlannerNode(successor);
                        open.Remove(successorNode);
                        successorNode.givenCost = tempGiven;
                        successorNode.parent = current;
                        open.Add(successorNode);
                    }
                }
                else
                {

                    PlannerNode successorNode = new PlannerNode(successor);
                    successorNode.givenCost = tempGiven;
                    successorNode.parent = current;
                    visited[successor] = successorNode;

                    open.Add(successorNode);
                }

            }
        }
        return;
    }